<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="SingoMapper">

	<!-- Beans의 멤버변수(property) 이름과 대상 테이블의 컬럼(column)을 연결한다. -->
	<resultMap type="study.shop.cidermarket.model.Singo" id="singoMap">
		<result property="singono" column="singono" />
		<result property="prodno" column="prodno" />
		<result property="type" column="type" />
		<result property="content" column="content" />
		<result property="membno" column="membno" />
		<result property="regdate" column="regdate" />
		<result property="nickname" column="nickname" />
		<result property="tradecon" column="tradecon" />
	</resultMap>
	<!-- 데이터 저장을 위한 기능 정의 -->
	<insert id="insertItem"
		parameterType="study.shop.cidermarket.model.Singo"
		useGeneratedKeys="true" keyProperty="singono">
		INSERT INTO singo (
		prodno, type, content, membno, regdate
		) VALUES (
		#{prodno}, #{type}, #{content}, #{membno}, now()
		)
	</insert>
	
	<!-- 신고에 쓸 다중행 조회를 위한 기능 정의 (최신순) -->
	<select id="singoSelectList"
		parameterType="study.shop.cidermarket.model.Singo"
		resultMap="singoMap">
		SELECT s.singono, s.prodno, s.content, s.membno, DATE_FORMAT(s.regdate, '%Y-%m-%d') AS regdate, s.type,
		m.nickname, p.tradecon 
		FROM singo s
		INNER JOIN member m ON m.membno=s.membno
		INNER JOIN product p ON p.prodno=s.prodno
		
		<where>
			<if test='type == "A"'>
			s.type IN ('S', 'G', 'P', 'E')
			</if>
			<if test='type == "S"'>
			s.type = 'S'
			</if>
			<if test='type == "P"'>
			s.type = 'P'
			</if>
			<if test='type == "G"'>
			s.type = 'G'
			</if>
			<if test='type == "E"'>
			s.type = 'E'
			</if>
			<if test="content != null and content != ''">
				AND (m.nickname LIKE concat('%', #{content}, '%') or s.prodno LIKE concat('%', #{content}, '%'))
			</if>
			
		</where>
		
		<if test='regdate=="desc"'>
		ORDER BY s.regdate DESC
		</if>
		<if test='regdate=="asc"'>
		ORDER BY s.regdate ASC
		</if>
		
		<if test="listCount > 0">
			LIMIT #{offset}, #{listCount}
		</if>
	</select>

	<!-- 데이터 삭제를 위한 기능 정의 -->
	<delete id="deleteItem"
		parameterType="study.shop.cidermarket.model.Singo">
		DELETE FROM singo WHERE singono=#{singono}
	</delete>
	
	<!-- 상품 삭제에 따른 데이터 삭제를 위한 기능 정의 -->
	<delete id="deleteProductItem"
		parameterType="study.shop.cidermarket.model.Singo">
		DELETE FROM singo WHERE prodno = #{prodno}
	</delete>
	
	<!-- 관리자 페이지에서 쓸 데이터 수 조회를 위한 기능 정의 -->
	<select id="singoSelectCountAll"
		parameterType="study.shop.cidermarket.model.Singo"
		resultType="int">
		SELECT COUNT(*) FROM singo s
		INNER JOIN member m ON m.membno=s.membno
		
				<where>
			<if test='type == "A"'>
			s.type IN ('S', 'G', 'P', 'E')
			</if>
			<if test='type == "S"'>
			s.type = 'S'
			</if>
			<if test='type == "P"'>
			s.type = 'P'
			</if>
			<if test='type == "G"'>
			s.type = 'G'
			</if>
			<if test='type == "E"'>
			s.type = 'E'
			</if>
			<if test="content != null and content != ''">
				AND (m.nickname LIKE concat('%', #{content}, '%') or s.prodno LIKE concat('%', #{content}, '%'))
			</if>
			
		</where>
	</select>
	
			<!-- 센더가 회원 탈퇴 시 더미데이터로 수정을 위한 기능 정의 (실제로 삭제하지 않고 데이터 값을 바꾼다). -->	
	<update id="updateItemByMembno"
		parameterType="study.shop.cidermarket.model.Singo">
		UPDATE singo SET
			membno= 999
		WHERE membno=#{membno}
	</update>	
</mapper>