<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ProductMapper">

	<!-- Beans의 멤버변수(property) 이름과 대상 테이블의 컬럼(column)을 연결한다. -->
	<resultMap type="study.shop.cidermarket.model.Product" id="productMap">
		<result property="prodno" column="prodno" />
		<result property="cateno" column="cateno" />
		<result property="subject" column="subject" />
		<result property="price" column="price" />
		<result property="fee" column="fee" />
		<result property="detail" column="detail" />
		<result property="regdate" column="regdate" />
		<result property="prodcon" column="prodcon" />
		<result property="how" column="how" />
		<result property="tradecon" column="tradecon" />
		<result property="seller" column="seller" />
		<result property="hits" column="hits" />
		<result property="editdate" column="editdate" />
		<result property="filepath" column="filepath" />
		<result property="sellerNick" column="sellerNick" />
	</resultMap>
	
	<!-- 단일행 조회를 위한 기능 정의 -->
	<select id="selectItem"
		parameterType="study.shop.cidermarket.model.Product"
		resultMap="productMap">
		SELECT prodno, cateno, subject, price, fee, detail,
			DATE_FORMAT(regdate, '%Y-%m-%d %H:%i:%S') AS regdate, 
			prodcon, how, tradecon,	seller, hits, 
			DATE_FORMAT(editdate, '%Y-%m-%d %H:%i:%S') AS editdate,
			(SELECT filepath FROM files WHERE fileno=(SELECT MIN(fileno) FROM files WHERE refid=prodno AND reftable='product')) AS filepath
		FROM product
		WHERE prodno=#{prodno}
	</select>
	
	<!-- 다중행 조회를 위한 기능 정의 -->
	<select id="selectList"
		parameterType="study.shop.cidermarket.model.Product"
		resultMap="productMap">
		SELECT prodno, cateno, subject, price, fee, detail,
			DATE_FORMAT(regdate, '%Y-%m-%d %H:%i:%S') AS regdate, 
			prodcon, how, tradecon, hits, seller,
			(SELECT nickname FROM member WHERE membno=seller) AS sellerNick,  
			DATE_FORMAT(editdate, '%Y-%m-%d %H:%i:%S') AS editdate,
			(SELECT filepath FROM files WHERE fileno=(SELECT MIN(fileno) FROM files WHERE refid=prodno AND reftable='product')) AS filepath
		FROM product
		
		<where>
			<if test="subject != null and subject != ''">
				subject LIKE concat('%', #{subject}, '%') OR 
				seller=(SELECT membno FROM member WHERE membno=seller AND nickname LIKE concat('%', #{subject}, '%'))
				OR prodno in (SELECT DISTINCT prodno FROM hashtag WHERE tagname LIKE concat('%', #{subject}, '%'))
			</if>
		</where>
		
		ORDER BY prodno DESC
		
		<if test="listCount > 0">
			LIMIT #{offset}, #{listCount}
		</if>
	</select>	
	
	<!-- 데이터 수 조회를 위한 기능 정의 -->
	<select id="selectCountAll"
		parameterType="study.shop.cidermarket.model.Product"
		resultType="int">
		SELECT COUNT(*) FROM product
		
		<where>
			<if test="subject != null and subject != ''">
				subject LIKE concat('%', #{subject}, '%')
			</if>
		</where>
	</select>
	
	<!-- 데이터 저장을 위한 기능 정의 -->
	<insert id="insertItem"
		parameterType="study.shop.cidermarket.model.Product"
		useGeneratedKeys="true" keyProperty="prodno">
		INSERT INTO product (
			prodno, cateno, subject, price, fee, detail, regdate, 
			prodcon, how, tradecon, seller, hits, editdate
		) VALUES (
			#{prodno}, #{cateno}, #{subject}, #{price}, #{fee}, 
			#{detail}, now(), #{prodcon}, #{how}, "J",
			#{seller}, 0, now()
		)
	</insert>
	
	<!-- 데이터 삭제를 위한 기능 정의 -->
	<delete id="deleteItem"
		parameterType="study.shop.cidermarket.model.Product">
		DELETE FROM product WHERE prodno=#{prodno}
	</delete>
	
	<!-- 데이터 갱신을 위한 기능 정의 -->
	<update id="updateItem"
		parameterType="study.shop.cidermarket.model.Product">
		UPDATE student SET
			cateno=#{cateno}, subject=#{subject}, price=#{price}, fee=#{fee}, 
			detail=#{detail}, regdate=#{regdate}, prodcon=#{prodcon}, how=#{how}, tradecon=#{tradecon},
			seller=#{seller}, hits=#{hits}, editdate=now()
		WHERE prodno=#{prodno}
	</update>

</mapper>